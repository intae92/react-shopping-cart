{"version":3,"file":"static/js/312.daa30ec0.chunk.js","mappings":"2KAOA,IAAMA,EAAiBC,EAAAA,GAAAA,KAAH,wIAEL,qBAAGC,UAA2B,MAM7C,IAZA,YAAwC,IAApBC,EAAmB,EAAnBA,MAAOD,EAAY,EAAZA,SACzB,OAAO,UAACF,EAAD,CAAgBE,SAAUA,EAA1B,UAAqCE,OAAOD,GAAOE,iBAAnD,c,4CCkBT,IApBmB,SAACC,GAClB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,CAAEK,SAAS,EAAOC,QAAS,KAA9D,eAAOC,EAAP,KAAcC,EAAd,KAEMC,GAAUC,EAAAA,EAAAA,aAAYX,EAAU,CAACA,IAYvC,OAVAY,EAAAA,EAAAA,YAAU,WACRF,IACGG,MAAK,SAACC,GACLX,EAAQW,EAAIZ,MACZG,GAAW,MAGZU,OAAM,SAACC,GAAD,OAASP,EAAS,CAAEH,SAAS,EAAMC,QAASS,EAAIT,eACxD,IAEI,CAAEL,KAAAA,EAAME,QAAAA,EAASI,MAAAA,K,+JCoC1B,IAAMS,GAA+BtB,EAAAA,EAAAA,IAAOuB,EAAAA,GAAAA,kBAAPvB,CAAH,yEAK5BwB,EAA0BxB,EAAAA,GAAAA,IAAH,yCAIvByB,EAA2BzB,EAAAA,GAAAA,IAAH,kIAQxB0B,GAA2B1B,EAAAA,EAAAA,IAAOuB,EAAAA,GAAAA,kBAAPvB,CAAH,4EAKxB2B,EAAmB3B,EAAAA,GAAAA,OAAH,6PAKN,qBAAG4B,MAAkBC,OAAOC,SACjC,qBAAGF,MAAkBC,OAAOE,SAMf,qBAAGH,MAAkBC,OAAOG,eAIpD,UAlFA,WACE,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAaC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,QAA1CH,SACAI,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAgCE,EAAAA,EAAAA,IAAW,kBAAMC,EAAAA,EAAAA,IAAeH,MAAlDI,EAAd,EAAQtC,KAAYE,EAApB,EAAoBA,QAEdqC,GAAYC,EAAAA,EAAAA,UAAQ,mBAAQV,EAASW,MAAK,SAACC,GAAD,OAAaA,EAAQR,KAAOA,OAAK,CAACA,EAAIJ,IAetF,GAAI5B,EAAS,OAAO,SAAC,IAAD,IAEpB,IAAQyC,EAA0BL,EAA1BK,SAAUC,EAAgBN,EAAhBM,KAAMjD,EAAU2C,EAAV3C,MAExB,OACE,UAACoB,EAAD,YACE,SAAC,KAAD,CAAoB8B,MAAO,QAASC,OAAQ,QAA5C,UACE,SAAC,KAAD,CAAWD,MAAO,QAASE,IAAKJ,OAElC,UAAC1B,EAAD,YACE,SAACC,EAAD,UAA2B0B,KAC3B,mBACA,UAACzB,EAAD,YACE,4CACA,SAAC,IAAD,CAAUxB,MAAOA,EAAOD,SAAU,cAGtC,SAAC0B,EAAD,CAAkB4B,QAAS,kBA9BX,SAACT,EAAWG,GAC9B,GAAIH,EAGF,OAFAU,MAAM,2FACNrB,EAAS,SAIXF,GAASwB,EAAAA,EAAAA,IAAsBR,IAAU/B,MAAK,WAC5CsC,MAAM,+EACNrB,EAAS,YAqBwBuB,CAAYZ,EAAWD,IAAxD","sources":["components/common/PriceBox.jsx","hooks/useRequest.js","pages/ProductDetailPage.jsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nfunction PriceBox({ price, fontSize }) {\n  return <StyledPriceBox fontSize={fontSize}>{Number(price).toLocaleString()}원</StyledPriceBox>;\n}\n\nconst StyledPriceBox = styled.span`\n  font-weight: 400;\n  font-size: ${({ fontSize }) => fontSize || 16}px;\n  line-height: 24px;\n  text-align: right;\n  letter-spacing: 0.5px;\n`;\n\nexport default PriceBox;\n","import { useState, useEffect, useCallback } from 'react';\n\nconst useRequest = (callback) => {\n  const [data, setDate] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState({ isError: false, message: '' });\n\n  const getData = useCallback(callback, [callback]);\n\n  useEffect(() => {\n    getData()\n      .then((res) => {\n        setDate(res.data);\n        setLoading(false);\n        return;\n      })\n      .catch((err) => setError({ isError: true, message: err.message }));\n  }, []);\n\n  return { data, loading, error };\n};\n\nexport default useRequest;\n","import { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { getProductItem } from '../api';\nimport { BASE_COMPONENT, StyledImageWrapper, StyledImg } from '../components/common';\nimport Loading from '../components/common/Loading';\nimport PriceBox from '../components/common/PriceBox';\nimport useRequest from '../hooks/useRequest';\nimport { AddProductToCartAsync } from '../store/modules/cart/actions';\n\nfunction ProductDetailPage() {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { products } = useSelector((state) => state.cart);\n  const { id } = useParams();\n  const { data: item, loading } = useRequest(() => getProductItem(id));\n\n  const isCkecked = useMemo(() => !!products.find((product) => product.id === id), [id, products]);\n\n  const handleClick = (isCkecked, product) => {\n    if (isCkecked) {\n      alert('이미 장바구니에 들어 있습니다.');\n      navigate('/cart');\n      return;\n    }\n\n    dispatch(AddProductToCartAsync(product)).then(() => {\n      alert('장바구니에 추가 되었습니다.');\n      navigate('/cart');\n    });\n  };\n\n  if (loading) return <Loading />;\n\n  const { imageUrl, name, price } = item;\n\n  return (\n    <StyledProductDetailContainer>\n      <StyledImageWrapper width={'large'} height={'large'}>\n        <StyledImg width={'large'} src={imageUrl}></StyledImg>\n      </StyledImageWrapper>\n      <StyledProductDetailInfo>\n        <StyledProductDetailTitle>{name}</StyledProductDetailTitle>\n        <hr />\n        <StyledProductDetailPrice>\n          <span>금액</span>\n          <PriceBox price={price} fontSize={'20'} />\n        </StyledProductDetailPrice>\n      </StyledProductDetailInfo>\n      <StyledShopButton onClick={() => handleClick(isCkecked, item)}>장바구니</StyledShopButton>\n    </StyledProductDetailContainer>\n  );\n}\n\nconst StyledProductDetailContainer = styled(BASE_COMPONENT.flexCenterWrapper)`\n  flex-direction: column;\n  margin: 60px auto;\n`;\n\nconst StyledProductDetailInfo = styled.div`\n  width: 450px;\n`;\n\nconst StyledProductDetailTitle = styled.div`\n  margin: 16px;\n  font-weight: 700;\n  font-size: 24px;\n  line-height: 36px;\n  letter-spacing: 0.5px;\n`;\n\nconst StyledProductDetailPrice = styled(BASE_COMPONENT.flexCenterWrapper)`\n  justify-content: space-between;\n  margin: 16px;\n`;\n\nconst StyledShopButton = styled.button`\n  width: 430px;\n  height: 60px;\n  left: 641px;\n  bottom: 60px;\n  background: ${({ theme }) => theme.COLORS.BROWN};\n  color: ${({ theme }) => theme.COLORS.WHITE};\n  font-size: 24px;\n  font-weight: 700;\n  border-radius: 4px;\n  border: none;\n  &:hover {\n    background-color: ${({ theme }) => theme.COLORS.LIGHT_BROWN};\n  }\n`;\n\nexport default ProductDetailPage;\n"],"names":["StyledPriceBox","styled","fontSize","price","Number","toLocaleString","callback","useState","data","setDate","loading","setLoading","isError","message","error","setError","getData","useCallback","useEffect","then","res","catch","err","StyledProductDetailContainer","BASE_COMPONENT","StyledProductDetailInfo","StyledProductDetailTitle","StyledProductDetailPrice","StyledShopButton","theme","COLORS","BROWN","WHITE","LIGHT_BROWN","dispatch","useDispatch","navigate","useNavigate","products","useSelector","state","cart","id","useParams","useRequest","getProductItem","item","isCkecked","useMemo","find","product","imageUrl","name","width","height","src","onClick","alert","AddProductToCartAsync","handleClick"],"sourceRoot":""}